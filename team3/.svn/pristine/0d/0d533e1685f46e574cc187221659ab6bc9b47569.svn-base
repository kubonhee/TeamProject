package net.yangchoo.controller;

import java.security.Principal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;

import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.yangchoo.domain.ChatContentsVO;
import net.yangchoo.domain.ChatVO;
import net.yangchoo.domain.MemberVO;
import net.yangchoo.domain.MessageVO;
import net.yangchoo.mapper.MemberMapper;
import net.yangchoo.security.domain.CustomUser;
import net.yangchoo.service.ChatService;

@Slf4j
@Controller
public class WebSocketHandler extends TextWebSocketHandler {
	
	@Autowired
	ChatService chatService;
	
	@Autowired
	private MemberMapper memberMapper;
	
	ObjectMapper objectMapper = new ObjectMapper();
	private Map<Integer, ArrayList<String>> RoomList = new ConcurrentHashMap<Integer, ArrayList<String>>();
//	private Map<Integer, String> sessionList = new ConcurrentHashMap<Integer, String>();
	private Map<Integer, Map<String, WebSocketSession>> sessionTest = new ConcurrentHashMap<Integer, Map<String, WebSocketSession>>();
	private Map<String, String> messageList = new HashMap<>();
	private static int i;
	Map<String, WebSocketSession> sessionTest2 = new HashMap<>();
	
	private List<WebSocketSession> sessions = new ArrayList<>();
	
	ChatVO chatVO = new ChatVO();
	ChatContentsVO chatContentVO = new ChatContentsVO();
	
	private List<WebSocketSession> sessionList = new ArrayList<>();
	private Map<String, MemberVO> usersMap = new HashMap<>();
	private Gson gson = new Gson();
	
	// 웹소켓 세션 연결
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		log.info(session.getId() + " : 님이 접속");
		log.info("연결 IP : " + session.getRemoteAddress().getHostName());
		
		Principal principal = session.getPrincipal();
		String id = principal.getName();
		MemberVO memberVO = memberMapper.read(id);
		System.out.println(memberVO);
		
		sessionList.add(session);
		usersMap.put(session.getId(), memberVO);
		
		MessageVO msg = new MessageVO();
		
		msg.setFromId(memberVO.getUserEmail());
		msg.setContent("님이 채팅방에 참여하셨습니다.");
		
		broadCast(session, msg);
		
		
//		String userEmail = session.getPrincipal().getName();
//		sessions.add(session);
//		
//		
//		System.out.println("sessionTest :: " + sessionTest);
//		System.out.println("session :: " +  session);
//		System.out.println(sessionList.size());
//		System.out.println("sessionList :: " + sessionList);
//		System.out.println("sessions :: " + session);
//		log.info(session.getId() + "님이 입장하셨습니다.");
		
		
		
//		sessionTest2.put(session.getId(), session);
		
		
		

//		sessionList.put(session, userEmail);
//		System.out.println(sessionList);
		
//		i++;
//		log.info(session.getId() + "연결 성공 => 총 접속 인원 : " + i + "명");
//		System.out.println(session.getPrincipal().getName());
	}
	
	// 웹소켓 메세지 전송시
	
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		MessageVO msg = gson.fromJson(message.getPayload(), MessageVO.class);
		
		MemberVO memberVO = usersMap.get(session.getId());
		log.info(memberVO.getUserEmail() + "로 부터" + msg.getContent());
		
		msg.setFromId(memberVO.getUserEmail());
		
		broadCast(session, msg);
		
		
		// 이전 코드
//		String userEmail = session.getPrincipal().getName();
//		log.info(session.getId() + " : " + message);
//		
//		for(WebSocketSession sess : sessions) {
//			sess.sendMessage(new TextMessage(message.getPayload()));
//			log.info(userEmail + " :: " + message.getPayload());
//			messageList.put("userEmail", userEmail);
//			messageList.put("message", message.getPayload());
//			System.out.println("MessageList :: " + messageList);
//		}
		
		
		
//		Iterator<String> sessionIds = sessionTest2.keySet().iterator();
//		String sessionId = "";
//		while(sessionIds.hasNext()) {
//			sessionId = sessionIds.next();
//			sessionTest2.get(sessionId).sendMessage(new TextMessage("Message :: " + message.getPayload()));
//		}
		
		
		
		
		
		
		
//		AbstractAuthenticationToken principal = (AbstractAuthenticationToken) session.getPrincipal();
//		Object userEmail = principal.getPrincipal();
//		ChatContentsVO clientMessage = objectMapper.readValue(message.getPayload(), ChatContentsVO.class);
//		
//		
//		ChatContentsVO chatContentsVO = new ChatContentsVO();
//		chatContentsVO.setChatSenderId((String) userEmail);
//		chatContentsVO.setChatContentsMessage(clientMessage.getChatContentsMessage());
//		
//		String json = objectMapper.writeValueAsString(chatContentsVO);
//		for(WebSocketSession wss : sessions) {
//			wss.sendMessage(new TextMessage(json));
//		}
		
		// 새로운 코드
		//String msg = message.getPayload();
		
		
		
		
//		String msg = message.getPayload();
//		
//		ChatContentsVO chatContentsVO = objectMapper.readValue(msg, ChatContentsVO.class);
//		
//		ChatVO chatVO = (ChatVO) chatService.chatRoomSelectOne(chatContentsVO.getChatRoomNo());
//		
//		if(RoomList.get(chatVO.getChatRoomNo()) == null && chatContentsVO.getChatContentsMessage().equals("ENTER-CHAT") && chatVO != null) {
//			ArrayList<WebSocketSession> sessionTwo = new ArrayList<>();
//			
//			sessionTwo.add(session);
//			sessionList.put(session, chatVO.getChatRoomNo());
//			RoomList.put(chatVO.getChatRoomNo(), sessionTwo);
//			log.info("채팅방 생성");
//		}
	}
	
	// 세션 커넥터 종료
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		MemberVO memberVO = usersMap.get(session.getId());
		
		log.info(memberVO.getUserEmail() + " :: 연결 종료");
		
		MessageVO msg = new MessageVO();
		msg.setFromId(memberVO.getUserEmail());
		msg.setContent("님이 채팅방에서 나갔습니다.");
		
		sessionList.remove(session);
		usersMap.remove(session.getId());
		
//		String userEmail = session.getPrincipal().getName();
//		sessions.remove(session);
//		sessionList.remove(session);
//		log.info(userEmail + "이 퇴장");
//		System.out.println("sessionList :: " + sessionList);
//		System.out.println("sessions :: " + session);

		
//		sessionTest2.remove(session);
		
		
		
		
//		System.out.println(sessionList);
//		i--;
//		log.info(session.getId() + "연결 종료 => 총 접속 인원 : " + i + "명");
//		
//		 if(sessionList.get(session) != null) {
//			 RoomList.get(sessionList.get(session)).remove(session);
//			 sessionList.remove(session);
//		 }
	}
	
//	private String getUserId(WebSocketSession session) {
//		Map<String, Object> httpSession = session.getAttributes();
//		String userId = (String) httpSession.get("userEmail");
//		return userId == null ? null : userId;
//	}
	
	private void broadCast(WebSocketSession sess, MessageVO msg) throws Exception {
		for(WebSocketSession session : sessionList) {
			if(sess.getId().equals(session.getId())) {
				continue;
			}
			if(msg.getToId() == null || msg.getToId().equals("")) {
				String str = gson.toJson(msg);
				session.sendMessage(new TextMessage(str));
			} else {
				MemberVO memberVO = usersMap.get(session.getId());
				if(msg.getToId().equals(memberVO.getUserEmail())) {
					String str = gson.toJson(msg);
					session.sendMessage(new TextMessage(str));
					break;
				}
			}
		}
	}
}
