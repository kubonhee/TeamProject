package net.yangchoo.controller;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;
import net.yangchoo.domain.BoardAttachVO;
import net.yangchoo.domain.BoardVO;
import net.yangchoo.service.BoardService;

@Controller
@Log4j
@RequestMapping("/board/*")
@AllArgsConstructor
public class BoardController {
	
	private BoardService service;
	
	//페이지(더보기) (9개씩 되도록 BoardMapper.xml에서지정해둠)
	@GetMapping({"more", "more/{bno}"}) @ResponseBody
	public ResponseEntity<List<BoardVO>> getListMore(@PathVariable Optional<Long> bno){
		log.info("getListMore...");
		log.info("bno :: " + bno);
		return new ResponseEntity<>(service.getListMore(bno.isPresent() ? bno.get() : null), HttpStatus.OK);
	}

	/*//페이지(더보기) (9개씩 되도록) 나중에 로그인이후 위에것과 바꿔 사용
	@GetMapping({"more/{writer}", "more/{bno}/{writer}"})
	@PreAuthorize("isAuthenticated()")
	public ResponseEntity<List<BoardVo>> getListMore(@PathVariable Optional<Long> bno, @PathVariable String writer){
		log.info("getListMore...");
		log.info("bno :: " + bno);
		return new ResponseEntity<>(service.getListMore(bno.isPresent() ? bno.get() : null, writer), HttpStatus.OK);
	}*/
	
	@GetMapping({"shop", "shop/{bno}"})
	public ResponseEntity<List<BoardVO>> getListMoreShop(@PathVariable Optional<Long> bno){
		log.info("getListMore...");
		log.info("bno :: " + bno);
		return new ResponseEntity<>(service.getListMore(bno.isPresent() ? bno.get() : null), HttpStatus.OK);
	}


	//조회
	@GetMapping("{bno}") @ResponseBody
	public ResponseEntity<BoardVO> get(@PathVariable Long bno) {
		log.info(bno);
		return new ResponseEntity<BoardVO>(service.get(bno),HttpStatus.OK);
	}
	//게시글 작성(등록)
	//@PreAuthorize("isAuthenticated()")
	/*@PostMapping("register") @ResponseBody
	public ResponseEntity<String> register(@RequestBody BoardVO boardVO){
		log.info("register..." + boardVO);
		boardVO.getAttachList().forEach(log::info);
		service.register(boardVO);
		return new ResponseEntity<>(boardVO.getBno().toString(), HttpStatus.OK);
	}
	*/
	@GetMapping("register")
	//@PreAuthorize("isAuthenticated()")
	public String register(){
		return "/board/register";
	}
	
	//@PreAuthorize("isAuthenticated()")
	@PostMapping("register")
	public String register(BoardVO boardVO, RedirectAttributes rttr){
		log.info("register...");
		log.info(boardVO);
		boardVO.getAttachList().forEach(log::info);
		service.register(boardVO);
		rttr.addFlashAttribute("result", boardVO.getBno());
		
		return "redirect:/board/shop/list";
	}

	//게시글 수정
	//@PreAuthorize("principal.username == #vo.replyer")
	@RequestMapping(value="{bno}", method={RequestMethod.PUT ,RequestMethod.PATCH})
	@ResponseBody
	public ResponseEntity<String> modify(@PathVariable("bno") Long bno, @RequestBody BoardVO boardVO){
		log.info("modify...");
		log.info(boardVO);
		boardVO.setBno(bno);
		boardVO.getAttachList().forEach(log::info);
		int updatetCount = service.modify(boardVO);
		log.info("insertCount ::" + updatetCount);
		return updatetCount == 1 ? 
				new ResponseEntity<>("success", HttpStatus.OK) : new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
	//게시글 삭제
	//@PreAuthorize("principal.username == #writer")
	@DeleteMapping("{bno}") // /{writer}
	@ResponseBody
	public ResponseEntity<String> remove(@PathVariable("bno") Long bno) {//, @PathVariable String writer
		log.info("remove :: " + bno);
		List<BoardAttachVO> list = service.getAttachList(bno);
		int removeCount = service.remove(bno);
		deleteFile(list);
		log.info("removeCount :: " + removeCount);
		return removeCount == 1 ? new ResponseEntity<>("succecc", HttpStatus.OK) : new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@ResponseBody
	@GetMapping("getAttachList")
	public List<BoardAttachVO> getAttachList(Long bno) {
		log.info("getAttachList...." + bno);
		return service.getAttachList(bno);
	}

	private void deleteFile(List<BoardAttachVO> attachList) {
		 log.info("deleteFile.........");
		 log.info(attachList);

		 attachList.forEach(attach-> {
			 new File(UploadController.UPLOAD_PATH, attach.getDownPath()).delete();
			 if(attach.isImage()) {
				 new File(UploadController.UPLOAD_PATH, attach.getThumbPath()).delete();
			 }
		 });
	}
	//게시글 목록
	@GetMapping("/shop/list")
	public String list(Model model){
		log.info("list");
		model.addAttribute("name", "홍길동");
		model.addAttribute("kor", 90);
		return "/board/shop";
	}
	//게시글 상세
	@GetMapping("/shop/details")
	public String details(Model model){
		log.info("details");
		model.addAttribute("name", "홍길동");
		model.addAttribute("kor", 90);
		return "/board/details";
	}
	
	//게시글 목록
	@GetMapping("/shop/list2") @ResponseBody
	public Map<String, Object> list2(Model model){
		log.info("list");
		Map<String, Object> map = new HashMap<>();
		map.put("name", "홍길동");
		map.put("kor", 90);
		return map;
	}
	
	//게시글 목록
	@GetMapping("/shop/list3") 
	public ResponseEntity<Map<String, Object>> list3(Model model){
		log.info("list");
		Map<String, Object> map = new HashMap<>();
		map.put("name", "홍길동");
		map.put("kor", 90);
		return new ResponseEntity<>(map, HttpStatus.OK);
	}
	
}
